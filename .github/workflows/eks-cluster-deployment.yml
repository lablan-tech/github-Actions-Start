name: Java with Maven Scanning with trivy gitleaks sonarqube and EKS deployment from ECR

on:
  push:
    branches: [ "main" ]

jobs:
  compile:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Compile with Maven
      run: mvn clean compile

  security-scanning:

    runs-on: self-hosted
    needs: compile
    steps:

    - name: Trivy File Scanner Installation
      run: |
         sudo apt-get install wget gnupg
         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
         echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
         sudo apt-get update
         sudo apt-get install trivy -y
         
    - name: Trivy File Scanning
      run: trivy fs --format table -o fs-report.json . 

    - name: Gitleaks Scanner Installation
      run: sudo apt install gitleaks -y     
      
    - name: Gitleaks Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json      
         
  tests:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Test Cases
      run: mvn clean test
      
  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: tests
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Test Cases
      run: mvn clean package

    - uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
    
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v5.2.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} #OPTIONAL
        
      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"        

#  build_docker_image_and_push_to_ECR:
#    runs-on: self-hosted
#    needs: build_project_and_sonar_scan
#    steps:
#    - uses: actions/checkout@v4
#    - name: Download JAR Artifacts
#      uses: actions/download-artifact@v4
#      with:
#        name: app-jar
#        path: app
      
    #- name: Display structure of downloaded files
    #  run: ls -R *app

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ vars.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v3
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3
    # - name: Build and push
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: true
    #     tags: oktbabs/bankapp:latest 
  create_ECR_registry:
    runs-on: self-hosted
    needs: build_project_and_sonar_scan
    steps:
    - uses: actions/checkout@v4       
    - name: Set full ECR repository path
      env:
        NAMESPACE: bankapp    
      run: echo "ECR_REPOSITORY=${{ env.NAMESPACE }}/${{ github.event.repository.name }}" >> $GITHUB_ENV

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY
                

  build-and-push-to-ECR:
    runs-on: self-hosted
    needs: create_ECR_registry
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate image tag
      id: generate_tag
      run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: github-session

    - name: Set ECR_REGISTRY
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        echo "ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
#    - name: Output Registry
#      run: echo "Using ECR Registry: $ECR_REGISTRY"
      
    - name: Build and Push Docker Image
      env:
        NAMESPACE: bankapp
        IMAGE_TAG: ${{ steps.generate_tag.outputs.tag }}
        REPO_NAME: ${{ github.event.repository.name }}
        #ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      run: |
       # REPO_NAME="${GITHUB_REPOSITORY##*/}"
        ECR_REPOSITORY="${NAMESPACE}/${REPO_NAME}"   
       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     
  create_and_prepare_kubernetes_cluster:
    runs-on: self-hosted  
    needs: build-and-push-to-ECR
    steps:
    - uses: actions/checkout@v4

    - name: Conditionally create EKS cluster
      run: |
        echo "Checking if EKS cluster '${{ secrets.EKS_CLUSTER_NAME }}' exists..."
        if aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
           echo "Cluster already exists. Skipping creation."
        else
             echo "Cluster does not exist. Creating..."
             eksctl create cluster \
             --name ${{ secrets.EKS_CLUSTER_NAME }} \
             --region ${{ secrets.AWS_REGION }} \
             --node-type t3.micro \
             --nodes 2 \
             --nodes-min 1 \
             --nodes-max 3 \
             --managed
        fi

    - name: Generate kubeconfig
      run: |
        {
         echo 'EKS_CREDS<<EOF'
         aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --dry-run | base64
         echo EOF
        } >> $GITHUB_ENV

    - uses: tale/kubectl-action@v1
      with:
          base64-kube-config: ${{ env.EKS_CREDS }}
       
    - name: Build, Tag, and Push Docker Image
      run: |
         sudo apt-get install wget gnupg
         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
         echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
         sudo apt-get update
         sudo apt-get install trivy -y
         
    - name: Trivy File Scanning
      run: trivy fs --format table -o fs-report.json . 
      
  deploy_image_to_kubernetes_cluster:
    runs-on: self-hosted
    needs: create_and_prepare_kubernetes_cluster
    steps:
    - uses: actions/checkout@v4

    - name: Install kubectl 
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client

    - name: Set up ECR info
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        REGION=${{ secrets.AWS_REGION }}
        echo "ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=bankapp/${{ github.event.repository.name }}" >> $GITHUB_ENV

    - name: Generate image tag
      id: generate_tag
      run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Deploy to EKS
      env:
        IMAGE_TAG: ${{ steps.generate_tag.outputs.tag }}
      run: |
        if [ -z "$IMAGE_TAG" ]; then
           echo "ERROR: IMAGE_TAG is not set"
           exit 1
        fi
        echo "Using Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" ds.yaml
        kubectl apply -f ds.yaml
        kubectl get nodes -o wide
        kubectl get pods --all-namespaces

